void help(int n, vector<vector<int>>& requests, vector<int>& buildings, int& ans, int idx, int curr_req_achieved){
        if(idx==requests.size()){
            for(int i=0;i<n;i++){
                if(buildings[i]!=0) return;
            }
            ans = max(ans,curr_req_achieved);
            return;
        }

        help(n,requests,buildings,ans,idx+1,curr_req_achieved);
        buildings[requests[idx][0]]--;
        buildings[requests[idx][1]]++;
        help(n,requests,buildings,ans,idx+1,curr_req_achieved+1);
        buildings[requests[idx][0]]++;
        buildings[requests[idx][1]]--;
    }
    
    int maximumRequests(int n, vector<vector<int>>& requests) {
        
        vector<int> buildings(n,0);
        int ans = 0;
        help(n,requests,buildings,ans,0, 0);
        return ans;
    }
