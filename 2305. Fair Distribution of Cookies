    // Time Complexity : O(N^K)
    // Space Complexity : O(K)

    
    void solve(int index,vector<int>&cookies,vector<int>&no_of_kids,int& ans)
    {
        if(index == cookies.size())
        {
            int res = 0;
            for(auto ele : no_of_kids)
            {
                res = max(res,ele);
            }
            ans = min(res,ans);
            return;
        }
        
        for(int i=0;i<no_of_kids.size();i++)
        {
            no_of_kids[i] += cookies[index];
            solve(index+1,cookies,no_of_kids,ans);
            no_of_kids[i] -= cookies[index];
        }
    }
    
    int distributeCookies(vector<int>& cookies, int k) {
        
        vector<int>no_of_kids(k,0);
        int ans = INT_MAX;
        int index = 0;
        solve(index,cookies,no_of_kids,ans);
        return ans;
    }
